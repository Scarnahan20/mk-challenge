{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","error","text","helper","name","setName","email","setEmail","message","setMessage","password","setPassword","handleChange","event","fieldName","target","currValue","value","prevValue","trim","className","onSubmit","preventDefault","TextField","helperText","label","onChange","variant","style","margin","multiline","rows","type","Button","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.40eb1154.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport './App.css';\n\n\nfunction App() {\n  const [name, setName] = useState({\n    error: true,\n    text: \"\",\n    helper: \"\"\n  });\n  const [email, setEmail] = useState({\n    error: true,\n    text: \"\",\n    helper: \"\"\n  });\n  const [message, setMessage] = useState({\n    error: true,\n    text: \"\",\n    helper: \"\"\n  });\n  const [password, setPassword] = useState({\n    error: true,\n    text: \"\",\n    helper: \"\"\n  });\n\n  function handleSubmit(event) {\n    event.preventDefault()\n    if(checkFields) {\n      \n    }\n  }\n\n  function checkFields(){\n    \n    if (name.error && email.error && message.error && password.error){\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  function handleChange(event) {\n    const fieldName = event.target.name;\n    const currValue = event.target.value;\n    if (fieldName === 'name'){\n      setName(prevValue => {\n        return {\n          ...prevValue,\n          text: currValue\n        };\n      });\n\n      \n    } else if (fieldName === 'email') {\n      setEmail(prevValue => {\n        return {\n          ...prevValue,\n          text: currValue\n        };\n      });\n\n      if (email.text.trim() === ''){\n        setEmail(prevValue => {\n          return {\n            ...prevValue,\n            error: true,\n            helper: 'Email is required.'\n          };\n        });\n      } else {\n        setEmail(prevValue => {\n          return {\n            ...prevValue,\n            error: false,\n            helper: ''\n          };\n        });\n      }\n    } else if (fieldName === 'message') {\n      setMessage(prevValue => {\n        return {\n          ...prevValue,\n          text: currValue\n        };\n      });\n\n      if (message.text.trim() === ''){\n        setMessage(prevValue => {\n          return {\n            ...prevValue,\n            error: true,\n            helper: 'Message is required.'\n          };\n        });\n      } else {\n        setMessage(prevValue => {\n          return {\n            ...prevValue,\n            error: false,\n            helper: ''\n          };\n        });\n      }\n    } else if (fieldName === 'password'){\n      setPassword(prevValue => {\n        return {\n          ...prevValue,\n          text: currValue\n        };\n      });\n\n      if (password.text.trim() === ''){\n        setPassword(prevValue => {\n          return {\n            ...prevValue,\n            error: true,\n            helper: 'Password is required.'\n          };\n        });\n      } else {\n        setPassword(prevValue => {\n          return {\n            ...prevValue,\n            error: false,\n            helper: ''\n          };\n        });\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={handleSubmit} >\n        <div>\n          <TextField\n            error={name.error}\n            helperText={name.helper}\n            name=\"name\"\n            label=\"Name\"\n            onChange={handleChange}\n            value={name.text}\n            variant=\"filled\"\n          />\n        </div>\n        <div>\n          <TextField\n            error={email.error}\n            helperText={email.helper}\n            name=\"email\"\n            label=\"Email\"\n            onChange={handleChange}\n            style={{margin: 4}}\n            value={email.text}\n            variant=\"filled\"\n          />\n        </div>\n        <div>\n          <TextField \n            error={message.error}\n            helperText={message.helper}\n            name=\"message\"\n            label=\"Message\"\n            multiline\n            onChange={handleChange}\n            rows=\"4\"\n            style={{margin: 4}}\n            value={message.text}\n            variant=\"filled\"\n          />\n        </div>\n        <div>\n          <TextField\n            error={password.error}\n            helperText={password.helper}\n            name=\"password\"\n            label=\"Password\"\n            onChange={handleChange}\n            style={{margin: 4}}\n            type=\"password\"\n            value={password.text}\n            variant=\"filled\"\n          />\n        </div>\n          <Button color=\"primary\" type=\"submit\" variant=\"contained\">\n            Submit\n          </Button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}