{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","request","Request","useState","error","text","helper","name","setName","email","setEmail","message","setMessage","checkFields","handleChange","event","fieldName","target","currValue","value","prevValue","trim","className","onSubmit","preventDefault","fetch","then","response","json","data","console","log","TextField","helperText","label","onChange","variant","style","margin","multiline","rows","Button","color","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"6PA+KeA,MAzKf,WACE,IAAMC,EAAU,IAAIC,QAAQ,2DADf,EAGWC,mBAAS,CAC/BC,OAAO,EACPC,KAAM,GACNC,OAAQ,KANG,mBAGNC,EAHM,KAGAC,EAHA,OAQaL,mBAAS,CACjCC,OAAO,EACPC,KAAM,GACNC,OAAQ,KAXG,mBAQNG,EARM,KAQCC,EARD,OAaiBP,mBAAS,CACrCC,OAAO,EACPC,KAAM,GACNC,OAAQ,KAhBG,mBAaNK,EAbM,KAaGC,EAbH,KA4Bb,SAASC,IAEP,SAAIN,EAAKH,OAASK,EAAML,OAASO,EAAQP,OAO3C,SAASU,EAAaC,GACpB,IAAMC,EAAYD,EAAME,OAAOV,KACzBW,EAAYH,EAAME,OAAOE,MACb,SAAdH,GACFR,GAAQ,SAAAY,GACN,OAAO,2BACFA,GADL,IAEEf,KAAMa,OAIe,KAArBX,EAAKF,KAAKgB,OACZb,GAAQ,SAAAY,GACN,OAAO,2BACFA,GADL,IAEEhB,OAAO,EACPE,OAAQ,yBAIZE,GAAQ,SAAAY,GACN,OAAO,2BACFA,GADL,IAEEhB,OAAO,EACPE,OAAQ,SAIS,UAAdU,GACTN,GAAS,SAAAU,GACP,OAAO,2BACFA,GADL,IAEEf,KAAMa,OAIgB,KAAtBT,EAAMJ,KAAKgB,OACbX,GAAS,SAAAU,GACP,OAAO,2BACFA,GADL,IAEEhB,OAAO,EACPE,OAAQ,0BAIZI,GAAS,SAAAU,GACP,OAAO,2BACFA,GADL,IAEEhB,OAAO,EACPE,OAAQ,SAIS,YAAdU,IACTJ,GAAW,SAAAQ,GACT,OAAO,2BACFA,GADL,IAEEf,KAAMa,OAIkB,KAAxBP,EAAQN,KAAKgB,OACfT,GAAW,SAAAQ,GACT,OAAO,2BACFA,GADL,IAEEhB,OAAO,EACPE,OAAQ,4BAIZM,GAAW,SAAAQ,GACT,OAAO,2BACFA,GADL,IAEEhB,OAAO,EACPE,OAAQ,SAOlB,OACE,yBAAKgB,UAAU,OACb,0CACA,0BAAMC,SAtGV,SAAsBR,GACpBA,EAAMS,iBACHX,GACDY,MAAMxB,GACHyB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIC,QAAQC,IAAIF,QAkG1B,6BACE,kBAACG,EAAA,EAAD,CACE5B,MAAOG,EAAKH,MACZ6B,WAAY1B,EAAKD,OACjBC,KAAK,OACL2B,MAAM,OACNC,SAAUrB,EACVK,MAAOZ,EAAKF,KACZ+B,QAAQ,YAGZ,6BACE,kBAACJ,EAAA,EAAD,CACE5B,MAAOK,EAAML,MACb6B,WAAYxB,EAAMH,OAClBC,KAAK,QACL2B,MAAM,QACNC,SAAUrB,EACVuB,MAAO,CAACC,OAAQ,GAChBnB,MAAOV,EAAMJ,KACb+B,QAAQ,YAGZ,6BACE,kBAACJ,EAAA,EAAD,CACE5B,MAAOO,EAAQP,MACf6B,WAAYtB,EAAQL,OACpBC,KAAK,UACL2B,MAAM,UACNK,WAAS,EACTJ,SAAUrB,EACV0B,KAAK,IACLH,MAAO,CAACC,OAAQ,GAChBnB,MAAOR,EAAQN,KACf+B,QAAQ,YAGZ,8BAEE,kBAACK,EAAA,EAAD,CAAQC,MAAM,UAAUC,KAAK,SAASP,QAAQ,aAA9C,aC3JUQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAvD,GACL0B,QAAQ1B,MAAMA,EAAMO,c","file":"static/js/main.49011dd3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport './App.css';\n\n\nfunction App() {\n  const request = new Request(\"https://grpuv0upxe.execute-api.us-west-2.amazonaws.com/\");\n\n  const [name, setName] = useState({\n    error: false,\n    text: \"\",\n    helper: \"\"\n  });\n  const [email, setEmail] = useState({\n    error: false,\n    text: \"\",\n    helper: \"\"\n  });\n  const [message, setMessage] = useState({\n    error: false,\n    text: \"\",\n    helper: \"\"\n  });\n\n  function handleSubmit(event) {\n    event.preventDefault()\n    if(checkFields) {\n      fetch(request)\n        .then(response => response.json())\n        .then(data => console.log(data));\n    }\n  }\n\n  function checkFields(){\n    \n    if (name.error && email.error && message.error){\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  function handleChange(event) {\n    const fieldName = event.target.name;\n    const currValue = event.target.value;\n    if (fieldName === 'name'){\n      setName(prevValue => {\n        return {\n          ...prevValue,\n          text: currValue\n        };\n      });\n\n      if (name.text.trim() === ''){\n        setName(prevValue => {\n          return {\n            ...prevValue,\n            error: true,\n            helper: 'Name is required.'\n          };\n        });\n      } else {\n        setName(prevValue => {\n          return {\n            ...prevValue,\n            error: false,\n            helper: ''\n          };\n        });\n      }\n    } else if (fieldName === 'email') {\n      setEmail(prevValue => {\n        return {\n          ...prevValue,\n          text: currValue\n        };\n      });\n\n      if (email.text.trim() === ''){\n        setEmail(prevValue => {\n          return {\n            ...prevValue,\n            error: true,\n            helper: 'Email is required.'\n          };\n        });\n      } else {\n        setEmail(prevValue => {\n          return {\n            ...prevValue,\n            error: false,\n            helper: ''\n          };\n        });\n      }\n    } else if (fieldName === 'message') {\n      setMessage(prevValue => {\n        return {\n          ...prevValue,\n          text: currValue\n        };\n      });\n\n      if (message.text.trim() === ''){\n        setMessage(prevValue => {\n          return {\n            ...prevValue,\n            error: true,\n            helper: 'Message is required.'\n          };\n        });\n      } else {\n        setMessage(prevValue => {\n          return {\n            ...prevValue,\n            error: false,\n            helper: ''\n          };\n        });\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Contact Us</h1>\n      <form onSubmit={handleSubmit} >\n        <div>\n          <TextField\n            error={name.error}\n            helperText={name.helper}\n            name=\"name\"\n            label=\"Name\"\n            onChange={handleChange}\n            value={name.text}\n            variant=\"filled\"\n          />\n        </div>\n        <div>\n          <TextField\n            error={email.error}\n            helperText={email.helper}\n            name=\"email\"\n            label=\"Email\"\n            onChange={handleChange}\n            style={{margin: 4}}\n            value={email.text}\n            variant=\"filled\"\n          />\n        </div>\n        <div>\n          <TextField \n            error={message.error}\n            helperText={message.helper}\n            name=\"message\"\n            label=\"Message\"\n            multiline\n            onChange={handleChange}\n            rows=\"4\"\n            style={{margin: 4}}\n            value={message.text}\n            variant=\"filled\"\n          />\n        </div>\n        <div>\n        </div>\n          <Button color=\"primary\" type=\"submit\" variant=\"contained\">\n            Submit\n          </Button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}